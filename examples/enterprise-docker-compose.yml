version: '3.8'

# NetBird Self-Hosted Enterprise Docker Compose Configuration
# This configuration includes enhanced security, monitoring, and high availability features
# suitable for enterprise deployments

services:
  # NetBird Management Server
  netbird-management:
    image: netbirdio/management:latest
    container_name: netbird-management
    restart: unless-stopped
    depends_on:
      - netbird-postgres
      - redis
    volumes:
      - netbird_mgmt_data:/var/lib/netbird
      - ./management.json:/etc/netbird/management.json:ro
      - ./logs:/var/log/netbird
    ports:
      - "127.0.0.1:8080:80"
    environment:
      NETBIRD_MGMT_CONFIG: /etc/netbird/management.json
      NETBIRD_LOG_LEVEL: INFO
      NETBIRD_METRICS_ENABLED: true
      NETBIRD_AUDIT_ENABLED: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    user: "65534:65534"
    networks:
      - netbird-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netbird-mgmt.rule=Host(`nb.example.com`) && PathPrefix(`/api`, `/management`)"
      - "traefik.http.services.netbird-mgmt.loadbalancer.server.port=80"

  # NetBird Signal Server
  netbird-signal:
    image: netbirdio/signal:latest
    container_name: netbird-signal
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/netbird
    ports:
      - "10000:80"
    environment:
      NETBIRD_LOG_LEVEL: INFO
      NETBIRD_METRICS_ENABLED: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "65534:65534"
    networks:
      - netbird-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netbird-signal.rule=Host(`nb.example.com`) && PathPrefix(`/signalexchange`)"

  # NetBird Dashboard (Frontend)
  netbird-dashboard:
    image: netbirdio/dashboard:latest
    container_name: netbird-dashboard
    restart: unless-stopped
    environment:
      NETBIRD_MGMT_API_ENDPOINT: https://nb.example.com
      NETBIRD_MGMT_GRPC_API_ENDPOINT: https://nb.example.com
      AUTH_AUDIENCE: ${AZURE_CLIENT_ID}
      AUTH_CLIENT_ID: ${AZURE_CLIENT_ID}
      AUTH_AUTHORITY: https://login.microsoftonline.com/${AZURE_TENANT_ID}/v2.0
      USE_AUTH0: false
      AUTH_REDIRECT_URI: https://nb.example.com/auth
      AUTH_SILENT_REDIRECT_URI: https://nb.example.com/silent-auth
      NETBIRD_TOKEN_SOURCE: accessToken
      NETBIRD_AUTH_USE_ID_TOKEN: false
    ports:
      - "127.0.0.1:3000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    user: "101:101"
    networks:
      - netbird-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netbird-dashboard.rule=Host(`nb.example.com`)"
      - "traefik.http.services.netbird-dashboard.loadbalancer.server.port=80"

  # PostgreSQL Database
  netbird-postgres:
    image: postgres:15-alpine
    container_name: netbird-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: netbird
      POSTGRES_USER: netbird
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./logs:/var/log/postgresql
    ports:
      - "127.0.0.1:5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netbird -d netbird"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
      - SETGID
      - SETUID
    networks:
      - netbird-internal
    labels:
      - "backup.enable=true"
      - "backup.cron=0 2 * * *"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: netbird-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./logs:/var/log/redis
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    networks:
      - netbird-internal

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
      - ./logs:/var/log/traefik
    networks:
      - netbird-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.nb.example.com`)"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: netbird-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - netbird-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.nb.example.com`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: netbird-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_ROOT_URL: https://grafana.nb.example.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3001:3000"
    networks:
      - netbird-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.nb.example.com`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  # Backup Service
  backup:
    image: alpine:latest
    container_name: netbird-backup
    restart: "no"
    volumes:
      - postgres_data:/data/postgres:ro
      - netbird_mgmt_data:/data/netbird:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
    command: /backup.sh
    networks:
      - netbird-internal
    profiles:
      - backup

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: netbird-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    ports:
      - "127.0.0.1:3100:3100"
    networks:
      - netbird-internal

  # Log Shipper
  promtail:
    image: grafana/promtail:latest
    container_name: netbird-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/netbird:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - netbird-internal

networks:
  netbird-internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  netbird_mgmt_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/netbird/data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/netbird/postgres
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  letsencrypt_data:
    driver: local
